var Orb;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it uses a non-standard name for the exports (exports).
(() => {
var exports = __webpack_exports__;
/*!********************!*\
  !*** ./src/orb.ts ***!
  \********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
;
;
const SUN_RADIUS = 200;
class Sun {
    radius = SUN_RADIUS / 10;
    max_tail_length = 200;
    color = "orange";
    getPosition(_) {
        return { r: 0, theta: 0 };
    }
}
;
/**
 *
Mercury: 57.9 million kilometers
Venus: 108.2 million kilometers
Earth: 149.6 million kilometers
Mars: 227.9 million kilometers
Jupiter: 778.3 million kilometers
Saturn: 1.43 billion kilometers
Uranus: 2.87 billion kilometers
Neptune: 4.5 billion kilometers
 *
 */
const EARTH_YEAR = 1 / 1000;
class Mercury {
    radius = 5;
    max_tail_length = 160;
    color = "red";
    getPosition(t) {
        return { r: SUN_RADIUS + 57.9, theta: t * 3 * EARTH_YEAR };
    }
}
;
class Venus {
    radius = 6;
    max_tail_length = 200;
    color = "grey";
    getPosition(t) {
        return {
            // r: SUN_RADIUS + 108.2,
            r: SUN_RADIUS + 120,
            theta: t * 2 * EARTH_YEAR
        };
    }
}
;
class Earth {
    radius = 8;
    max_tail_length = 400;
    color = "blue";
    getPosition(t) {
        return {
            // r: SUN_RADIUS + 149.6,
            r: SUN_RADIUS + 225,
            theta: t * EARTH_YEAR
        };
    }
}
;
class Mars {
    radius = 9;
    max_tail_length = 850;
    color = "red";
    getPosition(t) {
        return {
            // r: SUN_RADIUS + 227.9,
            r: SUN_RADIUS + 350,
            theta: t * 0.75 * EARTH_YEAR
        };
    }
}
;
class Jupiter {
    radius = 12;
    max_tail_length = 1000;
    color = "orange";
    getPosition(t) {
        return {
            // r: SUN_RADIUS + 778.3,
            r: SUN_RADIUS + 550,
            theta: t * 0.5 * EARTH_YEAR
        };
    }
}
;
class Saturn {
    radius = 13;
    max_tail_length = 1500;
    color = "orange";
    getPosition(t) {
        return {
            // r: SUN_RADIUS + 1430,
            r: SUN_RADIUS + 750,
            theta: t * 0.25 * EARTH_YEAR
        };
    }
}
;
class Uranus {
    radius = 8;
    max_tail_length = 3000;
    color = "blue";
    getPosition(t) {
        return {
            // r: SUN_RADIUS + 2870,
            r: SUN_RADIUS + 950,
            theta: t * 0.125 * EARTH_YEAR
        };
    }
}
;
class Neptune {
    radius = 7;
    max_tail_length = 5250;
    color = "blue";
    getPosition(t) {
        return {
            // r: SUN_RADIUS + 4500,
            r: SUN_RADIUS + 1200,
            theta: t * 0.08 * EARTH_YEAR
        };
    }
}
;
const PREVIOUS_POS_LENGTH = 100000;
class Orb {
    canvas;
    ctx;
    // Celestial objects in radial coordinates relative to the Sun
    celestialObjects;
    reference_id = 0;
    ref_translation = 1;
    next_reference = 0;
    prevPositions;
    origins;
    constructor(canvas) {
        this.canvas = canvas;
        this.celestialObjects = [];
        this.celestialObjects.push(new Sun());
        this.celestialObjects.push(new Mercury());
        this.celestialObjects.push(new Venus());
        this.celestialObjects.push(new Earth());
        this.celestialObjects.push(new Mars());
        this.celestialObjects.push(new Jupiter());
        this.celestialObjects.push(new Saturn());
        this.celestialObjects.push(new Uranus());
        this.celestialObjects.push(new Neptune());
        this.canvas.width = 1000;
        this.canvas.height = 1000;
        console.log(this.canvas.width, 'x', this.canvas.height);
        this.ctx = this.canvas.getContext("2d");
        this.prevPositions = new Map();
        for (let obj of this.celestialObjects) {
            const name = obj.constructor.name;
            this.prevPositions.set(name, []);
        }
        this.origins = [];
    }
    set_reference(n) {
        if (n >= 0 && n < this.celestialObjects.length) {
            this.next_reference = n;
            this.ref_translation = 0;
        }
    }
    toCPoint(pos) {
        return {
            x: (pos.r / 4) * Math.cos(pos.theta),
            y: (pos.r / 4) * Math.sin(pos.theta),
        };
    }
    draw(t) {
        // t = 0;
        // this.ctx.fillStyle = "black";
        // this.ctx.beginPath();
        // this.ctx.rect(0, 0, this.canvas.width, this.canvas.height);
        // this.ctx.fill();
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        // console.log("Draw", t);
        // Get the location from the reference
        let ref = this.celestialObjects[this.reference_id];
        let p = this.toCPoint(ref.getPosition(t));
        let ox = p.x;
        let oy = p.y;
        if (this.ref_translation != 1) {
            // Get the location from the next reference
            let nref = this.celestialObjects[this.next_reference];
            let n = this.toCPoint(nref.getPosition(t));
            ox = p.x * (1 - this.ref_translation) + n.x * this.ref_translation;
            oy = p.y * (1 - this.ref_translation) + n.y * this.ref_translation;
            this.ref_translation += 1 / 250;
            if (this.ref_translation >= 1) {
                this.ref_translation = 1;
                this.reference_id = this.next_reference;
            }
        }
        let origin = { x: ox, y: oy };
        const sunRPointToScreenCoords = (pos, origin) => {
            const p = this.toCPoint(pos);
            // Translate to the reference's relative coords
            p.x -= origin.x;
            p.y -= origin.y;
            // Convert to screen coords
            p.x += this.canvas.width / 2;
            p.y += this.canvas.height / 2;
            return p;
        };
        // Draw tails
        for (let ci = 0; ci < this.celestialObjects.length; ci++) {
            const obj = this.celestialObjects[ci];
            // if (ci == this.reference_id && this.ref_translation == 1) {
            //   continue;
            // }
            this.ctx.strokeStyle = obj.color;
            const name = obj.constructor.name;
            const points = this.prevPositions.get(name);
            if (points.length <= 1) {
                continue;
            }
            let coords = sunRPointToScreenCoords(points[points.length - 1], 
            // origin
            this.origins[points.length - 1]);
            let prev_x = coords.x;
            let prev_y = coords.y;
            let start_x = coords.x;
            let start_y = coords.y;
            let i = 2;
            //this.ctx.beginPath();
            //this.ctx.moveTo(prev_x, prev_y);
            //for (; i <= points.length; i++) {
            //  coords = sunRPointToScreenCoords(
            //    points[points.length - i],
            //    this.origins[points.length - i],
            //    // this.toCPoint(ref_pos[points.length - 1])
            //  );
            //  let x = coords.x;
            //  let y = coords.y;
            //  this.ctx.lineTo(x, y);
            //  prev_x = x;
            //  prev_y = y;
            //}
            //this.ctx.stroke();
            this.ctx.beginPath();
            this.ctx.moveTo(prev_x, prev_y);
            for (let i = 2; i <= Math.min(points.length, obj.max_tail_length); i++) {
                coords = sunRPointToScreenCoords(points[points.length - i], this.origins[points.length - i]);
                let x = coords.x;
                let y = coords.y;
                this.ctx.lineTo(x, y);
                prev_x = x;
                prev_y = y;
            }
            this.ctx.stroke();
        }
        // Draw planets
        for (let obj of this.celestialObjects) {
            const name = obj.constructor.name;
            let pos = obj.getPosition(t);
            pos.theta %= (2 * Math.PI);
            if (this.prevPositions.get(name).length >= PREVIOUS_POS_LENGTH) {
                this.prevPositions.get(name).shift();
            }
            this.prevPositions.get(name).push(pos);
            let coords = sunRPointToScreenCoords(pos, origin);
            let x = coords.x;
            let y = coords.y;
            this.ctx.fillStyle = "white";
            this.ctx.beginPath();
            this.ctx.arc(x, y, obj.radius + 5, 0, 2 * Math.PI);
            this.ctx.fill();
            this.ctx.fillStyle = obj.color;
            this.ctx.beginPath();
            this.ctx.arc(x, y, obj.radius, 0, 2 * Math.PI);
            this.ctx.fill();
            this.ctx.font = `${obj.radius}px Serif`;
            this.ctx.fillStyle = "black";
            const label = name[0];
            const size = this.ctx.measureText(label);
            this.ctx.fillText(label, x - size.width / 2, y + obj.radius / 4);
        }
        if (this.origins.length >= PREVIOUS_POS_LENGTH) {
            this.origins.shift();
        }
        this.origins.push(origin);
    }
}
exports["default"] = Orb;

})();

Orb = __webpack_exports__["default"];
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsSUFBSSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQztRQUUxQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDL0IsS0FBSyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN0QyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztZQUNsQyxJ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c3JjL29yYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgUlBvaW50IHtcbiAgcjogbnVtYmVyO1xuICB0aGV0YTogbnVtYmVyO1xufTtcblxuaW50ZXJmYWNlIENQb2ludCB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xufTtcblxuaW50ZXJmYWNlIENlbGVzdGlhbE9iamVjdCB7XG4gIHJhZGl1czogbnVtYmVyO1xuICBtYXhfdGFpbF9sZW5ndGg6IG51bWJlcjtcbiAgY29sb3I6IHN0cmluZztcbiAgZ2V0UG9zaXRpb246ICh0OiBudW1iZXIpID0+IFJQb2ludDtcbn1cblxuY29uc3QgU1VOX1JBRElVUyA9IDIwMDtcbmNsYXNzIFN1biBpbXBsZW1lbnRzIENlbGVzdGlhbE9iamVjdCB7XG4gIHJlYWRvbmx5IHJhZGl1cyA9IFNVTl9SQURJVVMgLyAxMDtcbiAgcmVhZG9ubHkgbWF4X3RhaWxfbGVuZ3RoID0gMjAwO1xuICByZWFkb25seSBjb2xvciA9IFwib3JhbmdlXCI7XG5cbiAgZ2V0UG9zaXRpb24oXzogbnVtYmVyKTogUlBvaW50IHtcbiAgICByZXR1cm4geyByOiAwLCB0aGV0YTogMCB9O1xuICB9XG59O1xuXG4vKipcbiAqXG5NZXJjdXJ5OiA1Ny45IG1pbGxpb24ga2lsb21ldGVyc1xuVmVudXM6IDEwOC4yIG1pbGxpb24ga2lsb21ldGVyc1xuRWFydGg6IDE0OS42IG1pbGxpb24ga2lsb21ldGVyc1xuTWFyczogMjI3LjkgbWlsbGlvbiBraWxvbWV0ZXJzXG5KdXBpdGVyOiA3NzguMyBtaWxsaW9uIGtpbG9tZXRlcnNcblNhdHVybjogMS40MyBiaWxsaW9uIGtpbG9tZXRlcnNcblVyYW51czogMi44NyBiaWxsaW9uIGtpbG9tZXRlcnNcbk5lcHR1bmU6IDQuNSBiaWxsaW9uIGtpbG9tZXRlcnNcbiAqXG4gKi9cblxuY29uc3QgRUFSVEhfWUVBUiA9IDEgLyAxMDAwO1xuXG5jbGFzcyBNZXJjdXJ5IGltcGxlbWVudHMgQ2VsZXN0aWFsT2JqZWN0IHtcbiAgcmVhZG9ubHkgcmFkaXVzID0gNTtcbiAgcmVhZG9ubHkgbWF4X3RhaWxfbGVuZ3RoID0gMTYwO1xuICByZWFkb25seSBjb2xvciA9IFwicmVkXCI7XG5cbiAgZ2V0UG9zaXRpb24odDogbnVtYmVyKTogUlBvaW50IHtcbiAgICByZXR1cm4geyByOiBTVU5fUkFESVVTICsgNTcuOSwgdGhldGE6IHQgKiAzICogRUFSVEhfWUVBUiB9O1xuICB9XG59O1xuXG5jbGFzcyBWZW51cyBpbXBsZW1lbnRzIENlbGVzdGlhbE9iamVjdCB7XG4gIHJlYWRvbmx5IHJhZGl1cyA9IDY7XG4gIHJlYWRvbmx5IG1heF90YWlsX2xlbmd0aCA9IDIwMDtcbiAgcmVhZG9ubHkgY29sb3IgPSBcImdyZXlcIjtcblxuICBnZXRQb3NpdGlvbih0OiBudW1iZXIpOiBSUG9pbnQge1xuICAgIHJldHVybiB7XG4gICAgICAvLyByOiBTVU5fUkFESVVTICsgMTA4LjIsXG4gICAgICByOiBTVU5fUkFESVVTICsgMTIwLFxuICAgICAgdGhldGE6IHQgKiAyICogRUFSVEhfWUVBUlxuICAgIH07XG4gIH1cbn07XG5cblxuY2xhc3MgRWFydGggaW1wbGVtZW50cyBDZWxlc3RpYWxPYmplY3Qge1xuICByZWFkb25seSByYWRpdXMgPSA4O1xuICByZWFkb25seSBtYXhfdGFpbF9sZW5ndGggPSA0MDA7XG4gIHJlYWRvbmx5IGNvbG9yID0gXCJibHVlXCI7XG5cbiAgZ2V0UG9zaXRpb24odDogbnVtYmVyKTogUlBvaW50IHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gcjogU1VOX1JBRElVUyArIDE0OS42LFxuICAgICAgcjogU1VOX1JBRElVUyArIDIyNSxcbiAgICAgIHRoZXRhOiB0ICogRUFSVEhfWUVBUlxuICAgIH07XG4gIH1cbn07XG5cbmNsYXNzIE1hcnMgaW1wbGVtZW50cyBDZWxlc3RpYWxPYmplY3Qge1xuICByZWFkb25seSByYWRpdXMgPSA5O1xuICByZWFkb25seSBtYXhfdGFpbF9sZW5ndGggPSA4NTA7XG4gIHJlYWRvbmx5IGNvbG9yID0gXCJyZWRcIjtcblxuICBnZXRQb3NpdGlvbih0OiBudW1iZXIpOiBSUG9pbnQge1xuICAgIHJldHVybiB7XG4gICAgICAvLyByOiBTVU5fUkFESVVTICsgMjI3LjksXG4gICAgICByOiBTVU5fUkFESVVTICsgMzUwLFxuICAgICAgdGhldGE6IHQgKiAwLjc1ICogRUFSVEhfWUVBUlxuICAgIH07XG4gIH1cbn07XG5cbmNsYXNzIEp1cGl0ZXIgaW1wbGVtZW50cyBDZWxlc3RpYWxPYmplY3Qge1xuICByZWFkb25seSByYWRpdXMgPSAxMjtcbiAgcmVhZG9ubHkgbWF4X3RhaWxfbGVuZ3RoID0gMTAwMDtcbiAgcmVhZG9ubHkgY29sb3IgPSBcIm9yYW5nZVwiO1xuXG4gIGdldFBvc2l0aW9uKHQ6IG51bWJlcik6IFJQb2ludCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIHI6IFNVTl9SQURJVVMgKyA3NzguMyxcbiAgICAgIHI6IFNVTl9SQURJVVMgKyA1NTAsXG4gICAgICB0aGV0YTogdCAqIDAuNSAqIEVBUlRIX1lFQVJcbiAgICB9O1xuICB9XG59O1xuXG5jbGFzcyBTYXR1cm4gaW1wbGVtZW50cyBDZWxlc3RpYWxPYmplY3Qge1xuICByZWFkb25seSByYWRpdXMgPSAxMztcbiAgcmVhZG9ubHkgbWF4X3RhaWxfbGVuZ3RoID0gMTUwMDtcbiAgcmVhZG9ubHkgY29sb3IgPSBcIm9yYW5nZVwiO1xuXG4gIGdldFBvc2l0aW9uKHQ6IG51bWJlcik6IFJQb2ludCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIHI6IFNVTl9SQURJVVMgKyAxNDMwLFxuICAgICAgcjogU1VOX1JBRElVUyArIDc1MCxcbiAgICAgIHRoZXRhOiB0ICogMC4yNSAqIEVBUlRIX1lFQVJcbiAgICB9O1xuICB9XG59O1xuXG5jbGFzcyBVcmFudXMgaW1wbGVtZW50cyBDZWxlc3RpYWxPYmplY3Qge1xuICByZWFkb25seSByYWRpdXMgPSA4O1xuICByZWFkb25seSBtYXhfdGFpbF9sZW5ndGggPSAzMDAwO1xuICByZWFkb25seSBjb2xvciA9IFwiYmx1ZVwiO1xuXG4gIGdldFBvc2l0aW9uKHQ6IG51bWJlcik6IFJQb2ludCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIHI6IFNVTl9SQURJVVMgKyAyODcwLFxuICAgICAgcjogU1VOX1JBRElVUyArIDk1MCxcbiAgICAgIHRoZXRhOiB0ICogMC4xMjUgKiBFQVJUSF9ZRUFSXG4gICAgfTtcbiAgfVxufTtcblxuY2xhc3MgTmVwdHVuZSBpbXBsZW1lbnRzIENlbGVzdGlhbE9iamVjdCB7XG4gIHJlYWRvbmx5IHJhZGl1cyA9IDc7XG4gIHJlYWRvbmx5IG1heF90YWlsX2xlbmd0aCA9IDUyNTA7XG4gIHJlYWRvbmx5IGNvbG9yID0gXCJibHVlXCI7XG5cbiAgZ2V0UG9zaXRpb24odDogbnVtYmVyKTogUlBvaW50IHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gcjogU1VOX1JBRElVUyArIDQ1MDAsXG4gICAgICByOiBTVU5fUkFESVVTICsgMTIwMCxcbiAgICAgIHRoZXRhOiB0ICogMC4wOCAqIEVBUlRIX1lFQVJcbiAgICB9O1xuICB9XG59O1xuXG5jb25zdCBQUkVWSU9VU19QT1NfTEVOR1RIID0gMTAwMDAwO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcmIge1xuICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcblxuICAvLyBDZWxlc3RpYWwgb2JqZWN0cyBpbiByYWRpYWwgY29vcmRpbmF0ZXMgcmVsYXRpdmUgdG8gdGhlIFN1blxuICBjZWxlc3RpYWxPYmplY3RzOiBDZWxlc3RpYWxPYmplY3RbXTtcblxuICByZWZlcmVuY2VfaWQ6IG51bWJlciA9IDA7XG4gIHJlZl90cmFuc2xhdGlvbjogbnVtYmVyID0gMTtcbiAgbmV4dF9yZWZlcmVuY2U6IG51bWJlciA9IDA7XG5cbiAgcHJldlBvc2l0aW9uczogTWFwPFN0cmluZywgUlBvaW50W10+O1xuICBvcmlnaW5zOiBDUG9pbnRbXTtcblxuICBjb25zdHJ1Y3RvcihjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgdGhpcy5jZWxlc3RpYWxPYmplY3RzID0gW107XG4gICAgdGhpcy5jZWxlc3RpYWxPYmplY3RzLnB1c2gobmV3IFN1bigpKTtcbiAgICB0aGlzLmNlbGVzdGlhbE9iamVjdHMucHVzaChuZXcgTWVyY3VyeSgpKTtcbiAgICB0aGlzLmNlbGVzdGlhbE9iamVjdHMucHVzaChuZXcgVmVudXMoKSk7XG4gICAgdGhpcy5jZWxlc3RpYWxPYmplY3RzLnB1c2gobmV3IEVhcnRoKCkpO1xuICAgIHRoaXMuY2VsZXN0aWFsT2JqZWN0cy5wdXNoKG5ldyBNYXJzKCkpO1xuICAgIHRoaXMuY2VsZXN0aWFsT2JqZWN0cy5wdXNoKG5ldyBKdXBpdGVyKCkpO1xuICAgIHRoaXMuY2VsZXN0aWFsT2JqZWN0cy5wdXNoKG5ldyBTYXR1cm4oKSk7XG4gICAgdGhpcy5jZWxlc3RpYWxPYmplY3RzLnB1c2gobmV3IFVyYW51cygpKTtcbiAgICB0aGlzLmNlbGVzdGlhbE9iamVjdHMucHVzaChuZXcgTmVwdHVuZSgpKTtcblxuICAgIHRoaXMuY2FudmFzLndpZHRoID0gMTAwMDtcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSAxMDAwO1xuICAgIGNvbnNvbGUubG9nKHRoaXMuY2FudmFzLndpZHRoLCAneCcsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgdGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikhO1xuXG4gICAgdGhpcy5wcmV2UG9zaXRpb25zID0gbmV3IE1hcCgpO1xuICAgIGZvciAobGV0IG9iaiBvZiB0aGlzLmNlbGVzdGlhbE9iamVjdHMpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBvYmouY29uc3RydWN0b3IubmFtZTtcbiAgICAgIHRoaXMucHJldlBvc2l0aW9ucy5zZXQobmFtZSwgW10pO1xuICAgIH1cblxuICAgIHRoaXMub3JpZ2lucyA9IFtdO1xuICB9XG5cblxuICBzZXRfcmVmZXJlbmNlKG46IG51bWJlcikge1xuICAgIGlmIChuID49IDAgJiYgbiA8IHRoaXMuY2VsZXN0aWFsT2JqZWN0cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubmV4dF9yZWZlcmVuY2UgPSBuO1xuICAgICAgdGhpcy5yZWZfdHJhbnNsYXRpb24gPSAwO1xuICAgIH1cbiAgfVxuXG4gIHRvQ1BvaW50KHBvczogUlBvaW50KTogQ1BvaW50IHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogKHBvcy5yIC8gNCkgKiBNYXRoLmNvcyhwb3MudGhldGEpLFxuICAgICAgeTogKHBvcy5yIC8gNCkgKiBNYXRoLnNpbihwb3MudGhldGEpLFxuICAgIH1cbiAgfVxuXG4gIGRyYXcodDogbnVtYmVyKSB7XG4gICAgLy8gdCA9IDA7XG4gICAgLy8gdGhpcy5jdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xuICAgIC8vIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgIC8vIHRoaXMuY3R4LnJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgLy8gdGhpcy5jdHguZmlsbCgpO1xuICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcbiAgICAvLyBjb25zb2xlLmxvZyhcIkRyYXdcIiwgdCk7XG4gICAgLy8gR2V0IHRoZSBsb2NhdGlvbiBmcm9tIHRoZSByZWZlcmVuY2VcbiAgICBsZXQgcmVmID0gdGhpcy5jZWxlc3RpYWxPYmplY3RzW3RoaXMucmVmZXJlbmNlX2lkXTtcbiAgICBsZXQgcCA9IHRoaXMudG9DUG9pbnQocmVmLmdldFBvc2l0aW9uKHQpKTtcblxuICAgIGxldCBveCA9IHAueDtcbiAgICBsZXQgb3kgPSBwLnk7XG4gICAgaWYgKHRoaXMucmVmX3RyYW5zbGF0aW9uICE9IDEpIHtcbiAgICAgIC8vIEdldCB0aGUgbG9jYXRpb24gZnJvbSB0aGUgbmV4dCByZWZlcmVuY2VcbiAgICAgIGxldCBucmVmID0gdGhpcy5jZWxlc3RpYWxPYmplY3RzW3RoaXMubmV4dF9yZWZlcmVuY2VdO1xuICAgICAgbGV0IG4gPSB0aGlzLnRvQ1BvaW50KG5yZWYuZ2V0UG9zaXRpb24odCkpO1xuXG4gICAgICBveCA9IHAueCAqICgxIC0gdGhpcy5yZWZfdHJhbnNsYXRpb24pICsgbi54ICogdGhpcy5yZWZfdHJhbnNsYXRpb247XG4gICAgICBveSA9IHAueSAqICgxIC0gdGhpcy5yZWZfdHJhbnNsYXRpb24pICsgbi55ICogdGhpcy5yZWZfdHJhbnNsYXRpb247XG5cbiAgICAgIHRoaXMucmVmX3RyYW5zbGF0aW9uICs9IDEgLyAyNTA7XG4gICAgICBpZiAodGhpcy5yZWZfdHJhbnNsYXRpb24gPj0gMSkge1xuICAgICAgICB0aGlzLnJlZl90cmFuc2xhdGlvbiA9IDE7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlX2lkID0gdGhpcy5uZXh0X3JlZmVyZW5jZTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IG9yaWdpbiA9IHsgeDogb3gsIHk6IG95IH07XG5cbiAgICBjb25zdCBzdW5SUG9pbnRUb1NjcmVlbkNvb3JkcyA9IChwb3M6IFJQb2ludCwgb3JpZ2luOiBDUG9pbnQpOiBDUG9pbnQgPT4ge1xuICAgICAgY29uc3QgcCA9IHRoaXMudG9DUG9pbnQocG9zKTtcbiAgICAgIC8vIFRyYW5zbGF0ZSB0byB0aGUgcmVmZXJlbmNlJ3MgcmVsYXRpdmUgY29vcmRzXG4gICAgICBwLnggLT0gb3JpZ2luLng7XG4gICAgICBwLnkgLT0gb3JpZ2luLnk7XG5cbiAgICAgIC8vIENvbnZlcnQgdG8gc2NyZWVuIGNvb3Jkc1xuICAgICAgcC54ICs9IHRoaXMuY2FudmFzLndpZHRoIC8gMjtcbiAgICAgIHAueSArPSB0aGlzLmNhbnZhcy5oZWlnaHQgLyAyO1xuXG4gICAgICByZXR1cm4gcDtcbiAgICB9XG5cbiAgICAvLyBEcmF3IHRhaWxzXG4gICAgZm9yIChsZXQgY2kgPSAwOyBjaSA8IHRoaXMuY2VsZXN0aWFsT2JqZWN0cy5sZW5ndGg7IGNpKyspIHtcbiAgICAgIGNvbnN0IG9iaiA9IHRoaXMuY2VsZXN0aWFsT2JqZWN0c1tjaV07XG4gICAgICAvLyBpZiAoY2kgPT0gdGhpcy5yZWZlcmVuY2VfaWQgJiYgdGhpcy5yZWZfdHJhbnNsYXRpb24gPT0gMSkge1xuICAgICAgLy8gICBjb250aW51ZTtcbiAgICAgIC8vIH1cbiAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gb2JqLmNvbG9yO1xuXG5cbiAgICAgIGNvbnN0IG5hbWUgPSBvYmouY29uc3RydWN0b3IubmFtZTtcbiAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucHJldlBvc2l0aW9ucy5nZXQobmFtZSk7XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgY29vcmRzID0gc3VuUlBvaW50VG9TY3JlZW5Db29yZHMoXG4gICAgICAgIHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0sXG4gICAgICAgIC8vIG9yaWdpblxuICAgICAgICB0aGlzLm9yaWdpbnNbcG9pbnRzLmxlbmd0aCAtIDFdLFxuICAgICAgICAvLyB0aGlzLnRvQ1BvaW50KHJlZl9wb3NbcG9pbnRzLmxlbmd0aCAtIDFdKVxuICAgICAgKTtcbiAgICAgIGxldCBwcmV2X3ggPSBjb29yZHMueDtcbiAgICAgIGxldCBwcmV2X3kgPSBjb29yZHMueTtcbiAgICAgIGxldCBzdGFydF94ID0gY29vcmRzLng7XG4gICAgICBsZXQgc3RhcnRfeSA9IGNvb3Jkcy55O1xuXG4gICAgICBsZXQgaSA9IDI7XG5cbiAgICAgIC8vdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAvL3RoaXMuY3R4Lm1vdmVUbyhwcmV2X3gsIHByZXZfeSk7XG4gICAgICAvL2ZvciAoOyBpIDw9IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gIGNvb3JkcyA9IHN1blJQb2ludFRvU2NyZWVuQ29vcmRzKFxuICAgICAgLy8gICAgcG9pbnRzW3BvaW50cy5sZW5ndGggLSBpXSxcbiAgICAgIC8vICAgIHRoaXMub3JpZ2luc1twb2ludHMubGVuZ3RoIC0gaV0sXG4gICAgICAvLyAgICAvLyB0aGlzLnRvQ1BvaW50KHJlZl9wb3NbcG9pbnRzLmxlbmd0aCAtIDFdKVxuICAgICAgLy8gICk7XG4gICAgICAvLyAgbGV0IHggPSBjb29yZHMueDtcbiAgICAgIC8vICBsZXQgeSA9IGNvb3Jkcy55O1xuXG4gICAgICAvLyAgdGhpcy5jdHgubGluZVRvKHgsIHkpO1xuXG4gICAgICAvLyAgcHJldl94ID0geDtcbiAgICAgIC8vICBwcmV2X3kgPSB5O1xuICAgICAgLy99XG4gICAgICAvL3RoaXMuY3R4LnN0cm9rZSgpO1xuXG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgIHRoaXMuY3R4Lm1vdmVUbyhwcmV2X3gsIHByZXZfeSk7XG4gICAgICBmb3IgKGxldCBpID0gMjsgaSA8PSBNYXRoLm1pbihwb2ludHMubGVuZ3RoLCBvYmoubWF4X3RhaWxfbGVuZ3RoKTsgaSsrKSB7XG4gICAgICAgIGNvb3JkcyA9IHN1blJQb2ludFRvU2NyZWVuQ29vcmRzKFxuICAgICAgICAgIHBvaW50c1twb2ludHMubGVuZ3RoIC0gaV0sXG4gICAgICAgICAgdGhpcy5vcmlnaW5zW3BvaW50cy5sZW5ndGggLSBpXSxcbiAgICAgICAgICAvLyB0aGlzLnRvQ1BvaW50KHJlZl9wb3NbcG9pbnRzLmxlbmd0aCAtIDFdKVxuICAgICAgICApO1xuICAgICAgICBsZXQgeCA9IGNvb3Jkcy54O1xuICAgICAgICBsZXQgeSA9IGNvb3Jkcy55O1xuXG4gICAgICAgIHRoaXMuY3R4LmxpbmVUbyh4LCB5KTtcblxuICAgICAgICBwcmV2X3ggPSB4O1xuICAgICAgICBwcmV2X3kgPSB5O1xuICAgICAgfVxuICAgICAgdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgfVxuXG5cbiAgICAvLyBEcmF3IHBsYW5ldHNcbiAgICBmb3IgKGxldCBvYmogb2YgdGhpcy5jZWxlc3RpYWxPYmplY3RzKSB7XG4gICAgICBjb25zdCBuYW1lID0gb2JqLmNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICAgIGxldCBwb3MgPSBvYmouZ2V0UG9zaXRpb24odCk7XG4gICAgICBwb3MudGhldGEgJT0gKDIgKiBNYXRoLlBJKTtcbiAgICAgIGlmICh0aGlzLnByZXZQb3NpdGlvbnMuZ2V0KG5hbWUpLmxlbmd0aCA+PSBQUkVWSU9VU19QT1NfTEVOR1RIKSB7XG4gICAgICAgIHRoaXMucHJldlBvc2l0aW9ucy5nZXQobmFtZSkuc2hpZnQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJldlBvc2l0aW9ucy5nZXQobmFtZSkucHVzaChwb3MpO1xuXG4gICAgICBsZXQgY29vcmRzID0gc3VuUlBvaW50VG9TY3JlZW5Db29yZHMocG9zLCBvcmlnaW4pO1xuICAgICAgbGV0IHggPSBjb29yZHMueDtcbiAgICAgIGxldCB5ID0gY29vcmRzLnk7XG5cbiAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcbiAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgdGhpcy5jdHguYXJjKHgsIHksIG9iai5yYWRpdXMgKyA1LCAwLCAyICogTWF0aC5QSSk7XG4gICAgICB0aGlzLmN0eC5maWxsKCk7XG4gICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBvYmouY29sb3I7XG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgIHRoaXMuY3R4LmFyYyh4LCB5LCBvYmoucmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICB0aGlzLmN0eC5maWxsKCk7XG4gICAgICB0aGlzLmN0eC5mb250ID0gYCR7b2JqLnJhZGl1c31weCBTZXJpZmA7XG4gICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICBjb25zdCBsYWJlbCA9IG5hbWVbMF07XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5jdHgubWVhc3VyZVRleHQobGFiZWwpO1xuICAgICAgdGhpcy5jdHguZmlsbFRleHQobGFiZWwsIHggLSBzaXplLndpZHRoIC8gMiwgeSArIG9iai5yYWRpdXMgLyA0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcmlnaW5zLmxlbmd0aCA+PSBQUkVWSU9VU19QT1NfTEVOR1RIKSB7XG4gICAgICB0aGlzLm9yaWdpbnMuc2hpZnQoKTtcbiAgICB9XG4gICAgdGhpcy5vcmlnaW5zLnB1c2gob3JpZ2luKTtcbiAgfVxufVxuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=